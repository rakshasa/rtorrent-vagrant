#!/bin/bash

FAILED=0
LAST_VERIFY=

start_nodes() {
    echo "starting clients"
    "${SCRIPT_DIR}/start-rtorrent"

    echo "waiting for clients"

    if [ -n "${ACTIVE_NODES}" ]; then
        WAIT_NODES="${ACTIVE_NODES}" wait_for_nodes "is-client-active"
    else
        wait_for_nodes "is-client-active"
    fi
}

create_torrents() {
    CREATE_PRESET="${CREATE_PRESET}" CREATE_IPV4="${CREATE_IPV4}" CREATE_IPV6="${CREATE_IPV6}" CREATE_IF1="${CREATE_IF1}" CREATE_IF2="${CREATE_IF2}" "${SCRIPT_DIR}/test-create-all"

    local torrent=
    for torrent in `${SCRIPT_DIR}/torrent-list`; do
        WAIT_NODES="${ACTIVE_NODES}" wait_for_nodes is-loaded ${torrent}
        echo "${torrent}: loaded"
    done

    if [ "${POKE_SEED}" == "yes" ]; then
        echo "poking seeder"
        sleep 5
        NODES="node1" "${SCRIPT_DIR}/call-d-multicall" d.tracker_announce.force= > /dev/null
    fi
}

clean_all() {
    set -e

    echo "clean all"

    "${SCRIPT_DIR}/test-delete-all"
    WAIT_TIMEOUT=20 wait_for_nodes is-empty

    "${SCRIPT_DIR}/stop-rtorrent"; sleep 1
    "${SCRIPT_DIR}/config-clear"
}

setup_default() {
    "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-up-4-1 "node1 node2"
    ${SCRIPT_DIR}/ip-up-6-1 "node1 node3"
    ${SCRIPT_DIR}/ip-down-4-1 "node3"
    ${SCRIPT_DIR}/ip-down-6-1 "node2"
    ${SCRIPT_DIR}/ip-up-4-2 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-up-6-2 "node1 node2 node3"
}

setup_single() {
    "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-up-4-1 "node1 node2"
    ${SCRIPT_DIR}/ip-up-6-1 "node1 node3"
    ${SCRIPT_DIR}/ip-down-4-1 "node3"
    ${SCRIPT_DIR}/ip-down-6-1 "node2"
    ${SCRIPT_DIR}/ip-down-4-2 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-down-6-2 "node1 node2 node3"
}

setup_single_v4() {
    IPV4_ONLY=yes "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-up-4-1 "node1 node2"
    ${SCRIPT_DIR}/ip-up-6-1 "node3"
    ${SCRIPT_DIR}/ip-down-4-1 "node3"
    ${SCRIPT_DIR}/ip-down-6-1 "node1 node2"
    ${SCRIPT_DIR}/ip-down-4-2 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-down-6-2 "node1 node2 node3"
}

setup_single_v6() {
    "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-up-4-1 "node2"
    ${SCRIPT_DIR}/ip-up-6-1 "node1 node3"
    ${SCRIPT_DIR}/ip-down-4-1 "node1 node3"
    ${SCRIPT_DIR}/ip-down-6-1 "node2"
    ${SCRIPT_DIR}/ip-down-4-2 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-down-6-2 "node1 node2 node3"
}

setup_pair() {
    "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-up-4-1 "node1 node2"
    ${SCRIPT_DIR}/ip-up-6-1 "node1 node3"
    ${SCRIPT_DIR}/ip-down-4-1 "node3"
    ${SCRIPT_DIR}/ip-down-6-1 "node2"
    ${SCRIPT_DIR}/ip-up-4-2 "node1 node2"
    ${SCRIPT_DIR}/ip-up-6-2 "node1 node3"
    ${SCRIPT_DIR}/ip-down-4-2 "node3"
    ${SCRIPT_DIR}/ip-down-6-2 "node2"
}

setup_pair_v4() {
    "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-up-4-1 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-down-6-1 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-up-4-2 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-down-6-2 "node1 node2 node3"
}

setup_pair_v6() {
    "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-down-4-1 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-up-6-1 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-down-4-2 "node1 node2 node3"
    ${SCRIPT_DIR}/ip-up-6-2 "node1 node2 node3"
}

setup_quad_v4v6() {
    "${SCRIPT_DIR}/build-tracker"

    ${SCRIPT_DIR}/ip-up-4-1 "node1 node2 node3 node4 node5"
    ${SCRIPT_DIR}/ip-up-6-1 "node1 node2 node3 node4 node5"
    ${SCRIPT_DIR}/ip-up-4-2 "node1 node2 node3 node4 node5"
    ${SCRIPT_DIR}/ip-up-6-2 "node1 node2 node3 node4 node5"
}

setup() {
    local config="${1:?Missing config setup argument.}"

    echo "setting up config '${config}'"

    case ${config} in
        "default")
            setup_default &> /dev/null
            CREATE_PRESET=if_pair
            ;;
        "single")
            setup_single &> /dev/null
            CREATE_PRESET=if_single
            ;;
        "single_v4")
            setup_single_v4 &> /dev/null
            CREATE_PRESET=if_single
            ;;
        "single_v6")
            setup_single_v6 &> /dev/null
            CREATE_PRESET=if_single
            ;;
        "pair")
            setup_pair &> /dev/null
            CREATE_PRESET=if_pair
            ;;
        "pair_v4")
            setup_pair_v4 &> /dev/null
            CREATE_PRESET=if_pair
            CREATE_IPV6=no
            ;;
        "pair_v6")
            setup_pair_v6 &> /dev/null
            CREATE_PRESET=if_pair
            CREATE_IPV4=no
            ;;
        "pair_v4v6"|"quad_v4v6")
            setup_quad_v4v6 &> /dev/null
            CREATE_PRESET=if_pair
            ;;
        *)
            echo "missing config '${config}'"
            exit -1
            ;;
    esac

    echo "starting nodes"
    start_nodes

    CREATE_PRESET="${CREATE_PRESET}" CREATE_IPV4="${CREATE_IPV4}" CREATE_IPV6="${CREATE_IPV6}" CREATE_IF1="${CREATE_IF1}" CREATE_IF2="${CREATE_IF2}" create_torrents
    POKE_SEED="${POKE_SEED}" verify_seeds

    # TODO: Replace with check to see if we have in-progess.
    sleep 20
    set +e
}

exit_test() {
    echo

    if [[ ${FAILED} -eq 0 ]]; then
        echo "done: success"
    else
        echo "done: failed:${FAILED}"
    fi

    exit ${FAILED}
}

verify_seeds() {
    local torrent=
    for torrent in `${SCRIPT_DIR}/torrent-list`; do
        WAIT_NODES=node1 WAIT_TIMEOUT=60 wait_for_nodes is-completed ${torrent}
        echo "${torrent}: seed ready"
    done
}

verify_completed() {
    local node="${1:?Missing node argument.}"
    local torrent="${2:?Missing torrent argument.}"
    local message="${node} ${torrent} verify completed: ${3:?Missing message argument.}"

    [ -z "${LAST_VERIFY}" ] && echo
    LAST_VERIFY="${message}"

    if "${SCRIPT_DIR}/is-completed" "${node}" "${torrent}"; then
        echo -e "${GREEN}${message}... succeeded${NC}"
    else
        echo -e "${RED}${message}... failed${NC}"
        (( FAILED++ ))
    fi

    return 0
}

verify_incompleted() {
    local node="${1:?Missing node argument.}"
    local torrent="${2:?Missing torrent argument.}"
    local message="${node} ${torrent} verify incomplete: ${3:?Missing message argument.}"

    [ -z "${LAST_VERIFY}" ] && echo
    LAST_VERIFY="${message}"

    if "${SCRIPT_DIR}/is-completed" "${node}" "${torrent}"; then
        echo -e "${RED}${message}... failed${NC}"
        (( FAILED++ ))
    else
        echo -e "${GREEN}${message}... succeeded${NC}"
    fi

    return 0
}

verify_has_log_message() {
    local node="${1:?Missing node argument.}"
    local log_name="${2:?Missing log name argument.}"
    local message="${3:?Missing message argument.}"
    local log_message="${4:?Missing message argument.}"

    [ -z "${LAST_VERIFY}" ] && echo
    LAST_VERIFY="${message}"

    if grep "${log_message}" "${DATA_DIR}/${node}/log/${log_name}.log" &> /dev/null; then
        echo -e "${GREEN}${message}... succeeded${NC}"
    else
        echo -e "${RED}${message}... failed${NC}"
        (( FAILED++ ))
    fi

    return 0
}

verify_bind_failed() {
    local node="${1:?Missing node argument.}"
    local message="${2:?Missing message argument.}"

    verify_has_log_message ${node} crash "${message}" "C Caught exception: 'Could not open/bind port for listening: Cannot assign requested address'."
}
