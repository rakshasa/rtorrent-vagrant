#!/usr/bin/env bash

declare -a TEST_NAMES
declare -a TEST_RESULTS

test_init() {
  init_logging "standard" "test-feature-dns" "output"
  init_logging "compile" "test-feature-dns" "compile"
}

test_cleanup() {
  test_print_header "Results"
  test_print_results
}

test_unit() {
  local unit="${1:?Missing unit name.}"

  TEST_NAMES+=("${unit}")
  ("${TEST_DIR}/${unit}" && TEST_RESULTS+=(0)) || TEST_RESULTS+=(1)
}

test_begin() {
  test_print_header "${1:?Missing message.}"
  "${SCRIPT_DIR}/stop-rtorrent" || :
}

test_has_features() {
  local features="${@}"
  echo "checking if build has features: ${features}"
  "${SCRIPT_DIR}/build-has-feature" ${features}
}

test_print_header() {
  local message="${1:?Missing message.}"

  echo
  echo "======================================================================"
  echo "${message}"
  echo "======================================================================"
  echo
}

test_print_results() {
  echo
  for (( i = 0; i < ${#TEST_RESULTS[@]}; i++ )); do
    if [[ "${TEST_RESULTS[i]}" == 0 ]]; then
      color="${GREEN}"
    else
      color="${RED}"
    fi

    echo -e "${color}${TEST_NAMES[i]}:\t ${TEST_RESULTS[i]}${NC}"
  done
  echo
}

test_compile() {
  local options="${1}"

  echo "compiling with options '${options}'"

  if ! eval "BUILD_CONFIGURE=yes ${options} '${SCRIPT_DIR}/build-current'" >&${compile} 2>&1; then
    test_print_header "compilation logs"
    #exec ${compile}>&-
    tail -n100 "${LOG_FILENAMES[compile]}"
    test_print_header "compilation failed"
    return 1
  fi

  echo "finished compiling"
}

test_dns_resolver() {
  local resolver="${1:?Missing resolver argument.}"

  echo "using resolver '${resolver}'"
  "${SCRIPT_DIR}/ip-dns-resolver" "${resolver}"
}
