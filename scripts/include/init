#!/usr/bin/env bash

set -e

DEBUG=${DEBUG:-0}

case "$OSTYPE" in
  cygwin* | msys* | win*)
    ENABLE_SOCKETS=no
    ;;
  bsd* | darwin* | linux* | solaris* | *)
    ENABLE_SOCKETS=yes
    ;;
esac

TMP_SCRIPT_DIR="${BASH_SOURCE[0]%/*}"
ROOT_DIR="$(dirname "${TMP_SCRIPT_DIR[0]%/*}")"
DATA_DIR="${ROOT_DIR}/data"
SCRIPT_DIR="${ROOT_DIR}/scripts"
SOCKET_DIR="${ROOT_DIR}/data/sockets"
TEST_DIR="${ROOT_DIR}/test"

RPC_CLIENT="${SCRIPT_DIR}/xmlrpc2scgi.py"

DATA_VM_TORRENTS="/data/torrents"
DATA_HOST_WATCH="${DATA_DIR}/shared/watch"

TORRENT_VM_DIR="/data/torrents"
TORRENT_VM_SHARED_DIR="/data/shared/torrents"
TORRENT_SHARED_DIR="${DATA_DIR}/shared/torrents"

GIT_RTORRENT="${DATA_DIR}/builder/rtorrent"
GIT_LIBTORRENT="${DATA_DIR}/builder/libtorrent"

NC='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'

shopt -u progcomp
declare -A LOG_FILENAMES

[[ -f "${DATA_DIR}/current-nodes" ]] && source "${DATA_DIR}/current-nodes"

SEED_NODE="${SEED_NODE:-node1}"

call_quiet() {
  set +e
  local command="${1:?Missing call quiet command argument.}"
  local args=("${@:2}")
  local call_log="$("${command}" "${args}" 2>&1)"
  local call_result=$?
  set -e

  [[ ${call_result} -eq 0 ]] || echo "${call_log}"

  return ${call_result}
}

# DEPRECATE: Replace with parallel method.
wait_for_nodes() {
    SECONDS=0

    local timeout="${WAIT_TIMEOUT:-40}"
    local nodes="${WAIT_NODES:-${NODES}}"
    local method="${1:?Missing wait node method.}"
    shift

    #echo "wait_for_node: ${remaining} calling '${method}' $i $@"

    while true; do
        local check="${nodes[@]}"
        local failed=

        for node in ${check[@]}; do
            if "${SCRIPT_DIR}/${method}" "${node}" $@ &> /dev/null; then
                [[ "${DEBUG}" == "1" ]] && >&2 echo "wait_for_nodes done: ${SCRIPT_DIR}/${method} ${node} $@"
            else
                [[ "${DEBUG}" == "1" ]] && >&2 echo "wait_for_nodes failed: ${SCRIPT_DIR}/${method} ${node} $@"
                failed+="${node} "
            fi
        done

        if [[ -z "${failed[@]}" ]]; then
            return 0
        fi

        if (( SECONDS > timeout )); then
            >&2 echo "could not verify ${method} for nodes: ${failed[@]}"
            >&2 echo "failed ${method} with arguments: $@"
            return 1
        fi

        sleep 0.5
    done
}

init_logging() {
  local log_type="${1:?Missing type.}"
  local log_category="${2:?Missing category name.}"
  local log_name="${3:?Missing log name.}"
  local log_dir="${ROOT_DIR}/logs"
  local log_target="${log_category}.logs/${log_name}.$(date '+%Y-%m-%d_%H:%M:%S')"
  local log_file="${ROOT_DIR}/logs/${log_target}"

  (cd "${ROOT_DIR}" && mkdir -p "logs/${log_category}.logs")
  echo "started logging category:${log_category} name:${log_name}" > "${log_file}"

  if [[ ${BASH_VERSINFO[0]} > 4 ]] || ( [[ ${BASH_VERSINFO[0]} == 4 ]] && [[ ${BASH_VERSINFO[1]} > 0 ]] ); then
    # exec 50>> "${log_file}"
    # export BASH_XTRACEFD=50
    # set -x
    :
  else
    echo "not logging 'set -x' output, bash version >= 4.1 required"
    echo "not logging named redirects, bash version >= 4.1 required"
    exit 1
  fi

  case "${log_type}" in
    standard)
      exec 1> >(tee -ia "${log_file}")
      exec 2> >(tee -ia "${log_file}")
      exec {log}>> "${log_file}"
      LOG_FILENAMES["log"]="${log_file}"
      ;;
    compile)
      exec {compile}>> "${log_file}"
      LOG_FILENAMES["compile"]="${log_file}"
      ;;
    *)
      echo "Unknown logging type."
      exit 1
    ;;
  esac

  ln -fs "./${log_target}" "${log_dir}/${log_category}.${log_name}"
}
